//
// OR2X1  Module VerilogA Source Code
// 
// Copyright (C) 2021, Saed Abughannam
// Heinz Nixdorf Institut/Paderborn University, Paderborn, Germany
// 
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this file and associated documentation files,
// to deal the file without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the file, and to permit persons to whom the
// file is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the file.
// 
// THE FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE FILE OR THE USE OR OTHER
// DEALINGS IN THE FILE.
//


`include "constants.vams"
`include "disciplines.vams"

module OR2X1(out, in1, in2);

electrical in1, in2, out ;

 parameter real digThresh = 0.5,
                digOutLow = 0.0,
                digOutHigh = 1.0,
                trise=10n,
                tfall=10n ;

integer dig1, dig2, logicState ;

 analog begin 
   
    // Detect in1 threshold
     @(cross(V(in1)-digThresh, 0, 1n))
        if (V(in1)>digThresh)
            dig1 = 1 ;
        else
            dig1 = 0 ;
    // Detect in2 threshold
     @(cross(V(in2)-digThresh, 0, 1n))
        if (V(in2)>digThresh)
           dig2 = 1 ;
        else
           dig2 = 0 ;
 
        logicState = dig1 || dig2 ? digOutHigh : digOutLow;

        V(out) <+ transition(logicState , 0.0, trise, tfall);
 end
endmodule




